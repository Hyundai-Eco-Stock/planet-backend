<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.phoenix.planet.mapper.MemberMapper">
    
    <resultMap id="MemberResultMap" type="org.phoenix.planet.dto.member.raw.Member">
        <id column="member_id" property="id"/>
        <result column="email" property="email"/>
        <result column="name" property="name"/>
        <result column="profile_url" property="profileUrl"/>
        <result column="pwd_hash" property="pwdHash"/>
        <result column="provider" property="provider"/>
        <result column="birth" property="birth"/>
        <result column="address" property="address"/>
        <result column="detail_address" property="detailAddress"/>
        <result column="zip_code" property="zipCode"/>
        <result column="role" property="role"/>
        <result column="sex" property="sex"/>
        <result column="point" property="point"/>
        <result column="created_at" property="createdAt" jdbcType="DATE"
            javaType="java.time.LocalDateTime"/>
        <result column="updated_at" property="updatedAt" jdbcType="DATE"
            javaType="java.time.LocalDateTime"/>
    </resultMap>
    
    <insert id="insert" parameterType="org.phoenix.planet.dto.member.raw.Member">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT SEQ_MEMBER.NEXTVAL FROM DUAL
        </selectKey>
        
        INSERT INTO MEMBER (
        member_id,
        email,
        name,
        profile_url,
        pwd_hash,
        provider,
        birth,
        address,
        detail_address,
        zip_code,
        role,
        sex,
        updated_at
        ) VALUES (
        #{id},
        #{email},
        #{name},
        #{profileUrl, jdbcType=VARCHAR},
        #{pwdHash, jdbcType=VARCHAR},
        #{provider, jdbcType=VARCHAR},
        #{birth, jdbcType=VARCHAR},
        #{address, jdbcType=VARCHAR},
        #{detailAddress, jdbcType=VARCHAR},
        #{zipCode, jdbcType=VARCHAR},
        #{role},
        #{sex, jdbcType=VARCHAR},
        SYSDATE
        )
    </insert>
    
    <update id="updateProfileUrl" parameterType="map">
        UPDATE MEMBER
        SET profile_url = #{profileUrl},
        updated_at = SYSDATE
        WHERE member_id = #{memberId}
    </update>
    
    <update id="update" parameterType="map">
        UPDATE MEMBER
        SET
        pwd_hash = #{pwdHash},
        sex = #{sex},
        birth = TO_DATE(#{birth}, 'YYYY-MM-DD'),
        address = #{address},
        detail_address = #{detailAddress},
        zip_code = #{zipCode},
        updated_at = SYSDATE
        WHERE member_id = #{memberId}
    </update>
    
    <update id="updatePassword" parameterType="map">
        UPDATE MEMBER
        SET
        pwd_hash = #{pwdHash},
        updated_at = SYSDATE
        WHERE member_id = #{memberId}
    </update>
    
    <update id="updateProfile">
        UPDATE MEMBER
        SET
        <!--        email = #{email},-->
        <!--        name = #{name},-->
        sex = #{sex},
        birth = #{birth},
        address = #{address},
        detail_address = #{detailAddress},
        updated_at = SYSDATE
        WHERE member_id = #{memberId}
    </update>
    
    <select id="findById" parameterType="long" resultMap="MemberResultMap">
        SELECT
        member_id,
        email,
        name,
        profile_url,
        pwd_hash,
        provider,
        TO_CHAR(birth, 'YYYY-MM-DD') AS birth,
        address,
        detail_address,
        zip_code,
        role,
        sex,
        point,
        created_at,
        updated_at
        FROM MEMBER
        WHERE member_id = #{memberId}
    </select>
    
    <select id="findByEmail" parameterType="string" resultMap="MemberResultMap">
        SELECT
        member_id,
        email,
        name,
        profile_url,
        pwd_hash,
        provider,
        address,
        detail_address,
        role,
        sex,
        created_at,
        updated_at
        FROM MEMBER
        WHERE email = #{email}
    </select>
    
    <select id="findAll" resultType="org.phoenix.planet.dto.member.response.MemberListResponse">
        SELECT
        member_id,
        email,
        name,
        sex
        FROM MEMBER
        WHERE role = 'USER'
    </select>
    
    <resultMap id="PointWithHistoriesResultMap"
        type="org.phoenix.planet.dto.member.response.MemberPointWithHistoriesResponse">
        <id column="member_id" property="memberId"/>
        <result column="point" property="currentPoint"/>
        <collection property="histories"
            ofType="org.phoenix.planet.dto.member.response.PointExchangeHistory"
            javaType="java.util.List">
            <id column="point_exchange_history_id" property="id"/>
            <result column="point_price" property="pointPrice" jdbcType="NUMERIC"
                javaType="double"/>
            <result column="status" property="status"/>
            <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"
                javaType="java.time.LocalDateTime"/>
            <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"
                javaType="java.time.LocalDateTime"/>
        </collection>
    </resultMap>
    
    <select id="selectPointWithHistories" parameterType="long"
        resultMap="PointWithHistoriesResultMap">
        SELECT
        m.member_id,
        m.point,
        peh.point_exchange_history_id,
        point_price,
        peh.status,
        peh.created_at,
        peh.updated_at
        FROM member m
        LEFT JOIN point_exchange_history peh
        ON m.member_id = peh.member_id
        WHERE m.member_id = #{memberId}
        ORDER BY peh.created_at DESC
    </select>
    
    
    <!-- 포인트 차감 -->
    <update id="deductPointsByMemberId">
        UPDATE member
        SET point = point - #{points},
        updated_at = CURRENT_TIMESTAMP
        WHERE member_id = #{memberId}
        AND point >= #{points}
    </update>
    
    <!-- 포인트 복구 -->
    <update id="restorePointsByMemberId">
        UPDATE member
        SET point = point + #{points},
        updated_at = SYSDATE
        WHERE member_id = #{memberId}
    </update>
    
    
    <!--  마이페이지 - 구매내역 -->
    <select id="findMyOrders" parameterType="long"
        resultType="org.phoenix.planet.dto.member.response.MyOrderResponse">
        select
        H.ORDER_HISTORY_ID,
        H.ORDER_NUMBER,
        H.ORDER_STATUS,
        H.ORIGIN_PRICE,
        H.USED_POINT,
        H.DONATION_PRICE,
        H.FINAL_PAY_PRICE,
        H.ECO_DEAL_QR_URL,
        H.MEMBER_ID,
        H.CREATED_AT,
        H.REFUND_DONATION_PRICE,
        OP.ORDER_PRODUCT_ID,
        OP.PRICE,
        OP.QUANTITY,
        OP.CANCEL_STATUS,
        OP.ORDER_TYPE,
        OP.PRODUCT_ID,
        P.ECO_DEAL_STATUS,
        P.NAME as PRODUCT_NAME,
        P.IMAGE_URL as PRODUCT_IMAGE_URL,
        PH.PAYMENT_STATUS,
        P.SALE_PERCENT,
        P.PRICE*(1-NVL(P.SALE_PERCENT, 0)/100) as FINAL_PRODUCT_PRICE
        from ORDER_HISTORY H
        join ORDER_PRODUCT OP on H.ORDER_HISTORY_ID = OP.ORDER_HISTORY_ID
        join PRODUCT P on OP.PRODUCT_ID = P.PRODUCT_ID
        join PAYMENT_HISTORY PH on H.ORDER_HISTORY_ID = PH.ORDER_HISTORY_ID
        where H.MEMBER_ID = #{memberId} AND P.ECO_DEAL_STATUS IS NULL
        order by H.ORDER_HISTORY_ID desc, OP.ORDER_PRODUCT_ID desc
    </select>
    
    
    <!-- 마이페이지 - 에약한 에코딜 상품 -->
    <select id="reservedEcoDeal" parameterType="long"
        resultType="org.phoenix.planet.dto.member.response.MyEcoDealResponse">
        select
        OH.ORDER_HISTORY_ID,
        OH.ORDER_NUMBER,
        OH.ORDER_STATUS,
        OH.ORIGIN_PRICE,
        OH.USED_POINT,
        OH.DONATION_PRICE,
        OH.FINAL_PAY_PRICE,
        OH.ECO_DEAL_QR_URL,
        OH.CREATED_AT,
        OP.PRODUCT_ID,
        OP.PRICE,
        OP.QUANTITY,
        OP.CANCEL_STATUS,
        OP.ORDER_TYPE,
        P.NAME AS PRODUCT_NAME,
        P.ECO_DEAL_STATUS,
        P.SALE_PERCENT,
        P.IMAGE_URL
        from ORDER_HISTORY OH
        join ORDER_PRODUCT OP on OP.ORDER_HISTORY_ID = OH.ORDER_HISTORY_ID
        join PRODUCT P on P.PRODUCT_ID = OP.PRODUCT_ID
        where MEMBER_ID = #{member_id} and P.ECO_DEAL_STATUS = 'Y'
        order by OH.ORDER_HISTORY_ID desc, OP.ORDER_PRODUCT_ID desc
    </select>
    
    <select id="getMyRaffles" parameterType="long"
        resultType="org.phoenix.planet.dto.member.response.MyRaffleResponse">
        select
        RH.RAFFLE_HISTORY_ID,
        RH.WIN_STATUS,
        RH.raffle_id,
        R.START_DATE,
        R.END_DATE,
        P.NAME as product_name,
        P.IMAGE_URL as productImageUrl
        from raffle_history RH
        join RAFFLE R on RH.RAFFLE_ID = R.RAFFLE_ID
        join PRODUCT P on R.PRODUCT_ID = P.PRODUCT_ID
        where MEMBER_ID = #{memberId}
        order by RAFFLE_ID desc
    </select>
    <select id="selectUnsurveyPhtiMemberList" resultType="java.lang.Long">
        SELECT
        member_id AS memberId
        FROM
        MEMBER
        WHERE member_id NOT IN (
        SELECT
        member_id AS memberId
        FROM
        MEMBER_PHTI
        )
    </select>
</mapper>
