<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.phoenix.planet.mapper.EcoStockMapper">

    <select id="selectById" parameterType="long"
        resultType="org.phoenix.planet.dto.eco_stock.raw.EcoStock">
        SELECT
        eco_stock_id AS id,
        name,
        quantity,
        image_url AS imageUrl
        FROM eco_stock
        WHERE eco_stock_id = #{id}
    </select>


    <select id="findAll"
            resultType="org.phoenix.planet.dto.eco_stock.raw.EcoStock">
        SELECT
        es.eco_stock_id AS id,
        es.name AS name,
        es.quantity AS quantity,
        es.image_url AS imageUrl
        FROM eco_stock es
        ORDER BY es.eco_stock_id ASC
    </select>

    <update id="updateQuantityById">
        UPDATE ECO_STOCK
        SET QUANTITY = #{updateQuantity},
        UPDATED_AT = SYSDATE
        WHERE ECO_STOCK_ID = #{stockId}
    </update>

    
    <select id="findAllHistory"
            resultType="org.phoenix.planet.dto.eco_stock.raw.EcoStockUpdatePriceRecord">
        WITH basic_info AS (
            SELECT
                es.eco_stock_id,
                COUNT(si.stock_issue_id) AS stock_issue_count,
                es.quantity,
                es.init_price
            FROM eco_stock es
            LEFT JOIN stock_issue si ON es.eco_stock_id = si.eco_stock_id
            AND si.created_at >= #{targetTime}
            GROUP BY es.eco_stock_id, es.quantity, es.init_price
        ),
        transaction_counts AS (
            SELECT
                sph.eco_stock_id,
                SUM(th.sell_count) AS transaction_count
            FROM stock_price_history sph
            JOIN transaction_history th ON sph.stock_price_history_id = th.stock_price_history_id
            AND sph.stock_time = #{targetTime}
            AND th.created_at >= #{targetTime}
            GROUP BY sph.eco_stock_id
        ),
        raffle_counts AS (
            SELECT
                r.ECO_STOCK_ID,
                SUM(r.ECO_STOCK_AMOUNT) AS raffle_count
            FROM RAFFLE_HISTORY rh
            JOIN RAFFLE r ON r.RAFFLE_ID = rh.RAFFLE_ID
            AND rh.created_at >= #{targetTime}
            GROUP BY r.ECO_STOCK_ID
        ),
        ohlc_prices AS (
            SELECT
                eco_stock_id,
                open_price,
                high_price,
                low_price,
                close_price
            FROM (
                SELECT
                    eco_stock_id,
                    FIRST_VALUE(stock_price) OVER (
                        PARTITION BY eco_stock_id
                        ORDER BY stock_time ASC
                        ROWS UNBOUNDED PRECEDING
                    ) as open_price,
                    MAX(stock_price) OVER (PARTITION BY eco_stock_id) as high_price,
                    MIN(stock_price) OVER (PARTITION BY eco_stock_id) as low_price,
                    LAST_VALUE(stock_price) OVER (
                        PARTITION BY eco_stock_id
                        ORDER BY stock_time ASC
                        ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                    ) as close_price,
                    ROW_NUMBER() OVER (PARTITION BY eco_stock_id ORDER BY stock_time DESC) as rn
                FROM stock_price_history
                WHERE stock_time >= #{startTime} AND #{endTime}> stock_time
            ) ranked
            WHERE rn = 1
        )
        SELECT
            bi.eco_stock_id AS ecoStockId,
            bi.stock_issue_count AS stockIssueCount,
            COALESCE(tc.transaction_count, 0) AS transactionHistoryCount,
            COALESCE(rc.raffle_count, 0) AS raffleHistoryCount,
            op.close_price AS beforePrice,
            op.open_price AS open,
            op.high_price AS high,
            op.low_price AS low,
            op.close_price AS close,
            bi.quantity,
            bi.init_price AS initPrice
        FROM basic_info bi
        LEFT JOIN transaction_counts tc ON bi.eco_stock_id = tc.eco_stock_id
        LEFT JOIN raffle_counts rc ON bi.eco_stock_id = rc.ECO_STOCK_ID
        LEFT JOIN ohlc_prices op ON bi.eco_stock_id = op.eco_stock_id
        ORDER BY bi.eco_stock_id
    </select>

    
    <update id="callSellStockProcedure" statementType="CALLABLE">
        {call SELL_STOCK_TRANSACTION(
        #{memberId, mode=IN, jdbcType=NUMERIC},
        #{request.ecoStockId, mode=IN, jdbcType=NUMERIC},
        #{request.sellCount, mode=IN, jdbcType=NUMERIC},
        #{request.sellPrice, mode=IN, jdbcType=DOUBLE},
        #{request.pSuccess, mode=OUT, jdbcType=NUMERIC, javaType=Integer},
        #{request.pMessage, mode=OUT, jdbcType=VARCHAR, javaType=String},
        #{request.newPrice, mode=OUT, jdbcType=DOUBLE, javaType=Double},
        #{request.transactionTime, mode=OUT, jdbcType=TIMESTAMP, javaType=java.time.LocalDateTime}
        )}
    </update>
    
    <select id="callSellStockUserTransaction"
            statementType="CALLABLE"
            resultType="org.phoenix.planet.dto.eco_stock.raw.PointResult">
        {call SELL_STOCK_USER_TRANSACTION(
            #{loginMemberId, mode=IN, jdbcType=NUMERIC},
            #{memberStockInfo.ecoStockId, mode=IN, jdbcType=NUMERIC},
            #{sellQuantity, mode=IN, jdbcType=NUMERIC},
            #{result.executedPrice, mode=IN, jdbcType=DOUBLE},
            #{result.historyId, mode=IN, jdbcType=NUMERIC},
            #{pointResult.success, mode=OUT, jdbcType=NUMERIC, javaType=Integer},
            #{pointResult.message, mode=OUT, jdbcType=VARCHAR, javaType=String},
            #{pointResult.transactionTime, mode=OUT, jdbcType=TIMESTAMP, javaType=java.time.LocalDateTime},
            #{pointResult.currentTotalQuantity, mode=OUT, jdbcType=NUMERIC, javaType=Integer},
            #{pointResult.currentTotalAmount, mode=OUT, jdbcType=NUMERIC, javaType=DOUBLE},
            #{pointResult.memberPoint, mode=OUT, jdbcType=NUMERIC, javaType=DOUBLE}
        )}
    </select>
    
    <select id="findAllWithLastPrice"
            resultType="org.phoenix.planet.dto.eco_stock.raw.EcoStockWithLastPrice">
        SELECT
            es.ECO_STOCK_ID AS id,
            es.NAME         AS name,
            es.QUANTITY     AS quantity,
            es.IMAGE_URL    AS imageUrl,
            es.INIT_PRICE   AS initPrice,
            COALESCE(sph.STOCK_PRICE, es.INIT_PRICE) AS lastPrice,
            sph.STOCK_PRICE_HISTORY_ID AS stockPriceHistoryId,
            sph.STOCK_TIME             AS stockTime
        FROM ECO_STOCK es
        LEFT JOIN (
            SELECT
                ECO_STOCK_ID,
                STOCK_PRICE,
                STOCK_PRICE_HISTORY_ID,
                STOCK_TIME,
                ROW_NUMBER() OVER (PARTITION BY ECO_STOCK_ID ORDER BY STOCK_TIME DESC) AS rn
            FROM STOCK_PRICE_HISTORY
        ) sph
          ON es.ECO_STOCK_ID = sph.ECO_STOCK_ID
         AND sph.rn = 1
        ORDER BY es.ECO_STOCK_ID

    </select>
    
    <select id="findAllWithLastPriceByStockId"
            resultType="org.phoenix.planet.dto.eco_stock.raw.EcoStockWithLastPrice">
        SELECT
            es.ECO_STOCK_ID AS id,
            es.NAME         AS name,
            es.QUANTITY     AS quantity,
            es.IMAGE_URL    AS imageUrl,
            es.INIT_PRICE   AS initPrice,
            COALESCE(sph.STOCK_PRICE, es.INIT_PRICE) AS lastPrice,
            sph.STOCK_PRICE_HISTORY_ID AS stockPriceHistoryId,
            sph.STOCK_TIME             AS stockTime
        FROM ECO_STOCK es
        LEFT JOIN (
            SELECT
                ECO_STOCK_ID,
                STOCK_PRICE,
                STOCK_PRICE_HISTORY_ID,
                STOCK_TIME,
                ROW_NUMBER() OVER (
                    PARTITION BY ECO_STOCK_ID
                    ORDER BY STOCK_TIME DESC
                ) AS rn
            FROM STOCK_PRICE_HISTORY
        ) sph
          ON sph.ECO_STOCK_ID = es.ECO_STOCK_ID
         AND sph.rn = 1
        WHERE es.ECO_STOCK_ID = #{stockId}
    </select>
</mapper>