<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.phoenix.planet.mapper.MemberStockInfoMapper">
    <update id="updateOrInsert">
        MERGE INTO member_stock_info m
        USING (
        SELECT
        #{memberId} AS member_id,
        #{ecoStockId} AS eco_stock_id,
        #{quantity} AS add_quantity,
        (
        SELECT stock_price
        FROM stock_price_history
        WHERE eco_stock_id = #{ecoStockId}
        ORDER BY stock_time DESC
        FETCH FIRST 1 ROWS ONLY
        ) AS cur_price
        FROM dual
        ) s
        ON (m.member_id = s.member_id AND m.eco_stock_id = s.eco_stock_id)
        WHEN MATCHED THEN
        UPDATE SET
        m.current_total_quantity = NVL(m.current_total_quantity,0) + s.add_quantity,
        m.current_total_amount = NVL(m.current_total_amount,0) + (s.add_quantity * s.cur_price),
        m.updated_at = SYSDATE
        WHEN NOT MATCHED THEN
        INSERT (
        member_stock_info_id,
        member_id,
        eco_stock_id,
        current_total_quantity,
        current_total_amount,
        created_at,
        updated_at
        )
        VALUES (
        seq_member_stock_info.NEXTVAL,
        s.member_id,
        s.eco_stock_id,
        s.add_quantity,
        (s.add_quantity * s.cur_price),
        SYSDATE,
        SYSDATE
        )
    </update>

    <select id="findPersonalStockInfoById"
        resultType="org.phoenix.planet.dto.eco_stock.raw.MemberStockInfo">
        SELECT
        msi.MEMBER_STOCK_INFO_ID as memberStockInfoId,
        m.MEMBER_ID as memberId,
        msi.ECO_STOCK_ID as ecoStockId,
        COALESCE(msi.CURRENT_TOTAL_QUANTITY, 0) as currentTotalQuantity,
        COALESCE(msi.CURRENT_TOTAL_AMOUNT, 0) as currentTotalAmount,
        m.POINT as point
        FROM MEMBER m
        LEFT JOIN MEMBER_STOCK_INFO msi
        ON m.MEMBER_ID = msi.MEMBER_ID
        AND msi.ECO_STOCK_ID = #{ecoStockId}
        WHERE m.MEMBER_ID = #{memberId}
    </select>

    <!-- 회원 스톡 정보 신규 생성 -->
    <insert id="insertMemberStockInfo">
        <selectKey keyProperty="memberStockInfoId" resultType="Long" order="BEFORE">
            SELECT SEQ_ORDER_HISTORY.NEXTVAL FROM dual
        </selectKey>

        INSERT INTO member_stock_info (
        member_stock_info_id,
        member_id,
        eco_stock_id,
        current_total_quantity,
        current_total_amount,
        created_at,
        updated_at
        ) VALUES (
        #{memberStockInfoId},
        #{memberId},
        #{ecoStockId},
        #{quantity},
        #{amount},
        SYSDATE,
        SYSDATE
        )
    </insert>

    <!-- 회원 스톡 정보 업데이트 -->
    <update id="updateMemberStockInfo">
        UPDATE member_stock_info
        SET current_total_quantity = #{newQuantity},
        current_total_amount = #{newAmount},
        updated_at = SYSDATE
        WHERE member_stock_info_id = #{memberStockInfoId}
    </update>

    <select id="findAllPersonalStockInfoByMemberId"
        resultType="org.phoenix.planet.dto.eco_stock_info.response.MemberStockInfoWithDetail">
        SELECT
        msi.MEMBER_STOCK_INFO_ID as memberStockInfoId,
        msi.MEMBER_ID as memberId,
        msi.ECO_STOCK_ID as ecoStockId,
        msi.CURRENT_TOTAL_QUANTITY as currentTotalQuantity,
        msi.CURRENT_TOTAL_AMOUNT as currentTotalAmount,
        m.POINT as point,
        es.NAME as ecoStockName
        FROM MEMBER m
        JOIN MEMBER_STOCK_INFO msi
        ON m.MEMBER_ID = msi.MEMBER_ID
        JOIN ECO_STOCK es
        ON msi.ECO_STOCK_ID = es.ECO_STOCK_ID
        WHERE m.MEMBER_ID = #{memberId}
    </select>


    <select id="findAllEcoStockPrice"
        resultType="org.phoenix.planet.dto.eco_stock_info.response.EcoStockPriceResponse">
        SELECT
        eco_stock_id,
        stock_price_history_id,
        stock_time,
        stock_price,
        created_at
        FROM (
        SELECT
        ROW_NUMBER() OVER (PARTITION BY eco_stock_id ORDER BY created_at DESC) AS r,
        eco_stock_id,
        stock_price_history_id,
        stock_time,
        stock_price,
        created_at
        FROM stock_price_history
        ) t
        WHERE t.r = 1
    </select>
    
    <select id="validateUserStock" resultType="org.phoenix.planet.dto.eco_stock.raw.MemberStockInfo">
        select
        MEMBER_STOCK_INFO_ID,
        MEMBER_ID,
        ECO_STOCK_ID,
        CURRENT_TOTAL_QUANTITY,
        CURRENT_TOTAL_AMOUNT,
        0 as point
        from MEMBER_STOCK_INFO
        where ECO_STOCK_ID = #{ecoStockId}
          and MEMBER_ID = #{memberId}
          and CURRENT_TOTAL_QUANTITY >=  #{sellCount}
    </select>
</mapper>
