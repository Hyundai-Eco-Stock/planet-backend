<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.phoenix.planet.mapper.EcoStockPriceHistoryMapper">
    
    <select id="findAllLatestPrice" resultType="org.phoenix.planet.dto.eco_stock.raw.StockData">
        SELECT * FROM (
        SELECT
        stock_price_history_id AS stockPriceHistoryId,
        eco_stock_id AS ecoStockId,
        stock_time AS stockTime,
        stock_price AS stockPrice,
        sell_count AS sellCount,
        buy_count AS buyCount,
        ROW_NUMBER() OVER (PARTITION BY eco_stock_id ORDER BY stock_time DESC) as rn
        FROM stock_price_history
        ) WHERE rn = 1
    </select>

    <insert id="save">
        INSERT INTO STOCK_PRICE_HISTORY (
            STOCK_PRICE_HISTORY_ID,
            STOCK_TIME,
            STOCK_PRICE,
            ECO_STOCK_ID,
            CREATED_AT,
            SELL_COUNT,
            BUY_COUNT
        ) VALUES (
            SEQ_STOCK_PRICE_HISTORY.NEXTVAL,
            SYSDATE,
            #{newPrice},
            #{stockId},
            SYSDATE,
            0,
            0
        )
    </insert>
    
    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO STOCK_PRICE_HISTORY (
            STOCK_PRICE_HISTORY_ID,
            ECO_STOCK_ID,
            STOCK_TIME,
            STOCK_PRICE,
            SELL_COUNT,
            BUY_COUNT,
            CREATED_AT
        )
        SELECT
            SEQ_STOCK_PRICE_HISTORY.NEXTVAL,
            ECO_STOCK_ID,
            STOCK_TIME,
            STOCK_PRICE,
            SELL_COUNT,
            BUY_COUNT,
            SYSDATE
        FROM (
            <foreach collection="list" item="item" separator=" UNION ALL ">
                SELECT
                    #{item.ecoStockId} as ECO_STOCK_ID,
                    #{item.time, jdbcType=TIMESTAMP} as STOCK_TIME,
                    #{item.price} as STOCK_PRICE,
                    #{item.sellCount, jdbcType=INTEGER} as SELL_COUNT,
                    #{item.buyCount, jdbcType=INTEGER} as BUY_COUNT
                FROM DUAL
            </foreach>
        )
    </insert>
</mapper>
